ВВЕДЕНИЕ В КЛАССЫ И ОБЪЕКТЫ
Основные понятия ООП
Возможности программирования всегда были ограничены либо возможностями компьютера, либо возможностями человека. 
В прошлом веке главным ограничением были низкие производительные способности компьютера. В настоящее время физические 
ограничения отошли на второй план. Со всё более глубоким проникновением компьютеров во все сферы человеческой деятельности, 
программные системы становятся всё более простыми для пользователя и сложными по внутренней архитектуре. Программирование стало 
делом команды и на смену алгоритмическим идеологиям программирования пришли эвристические, позволяющие достичь положительного 
результата различными путями.
Базовым способом борьбы со сложностью программных продуктов стало объектно-ориентированное программирование (ООП), являющееся в 
настоящее время наиболее популярной парадигмой. ООП предлагает способы мышления и структурирования кода.
ООП  – методология программирования, основанная на представлении программного продукта в виде совокупности объектов, каждый из которых
 является экземпляром конкретного класса. ООП использует в качестве базовых элементов эвристическое взаимодействие объектов. 
Объект – реальная именованная сущность, обладающая свойствами и проявляющая свое поведение. 
В применении к объектно-ориентированным языкам программирования понятие объекта и класса конкретизируется, а именно:
Объект – обладающий именем набор данных (полей объекта), физически находящихся в памяти компьютера, и методов, имеющих доступ к ним. 
Имя используется для доступа к полям и методам, составляющим объект. В предельных случаях объект может не содержать полей или методов,
 а также не иметь имени. Любой объект относится к определенному классу. Класс содержит описание данных и операций над ними.
В классе дается обобщенное описание некоторого набора родственных, реально существующих объектов. Объект – конкретный экземпляр класса.
В качестве примера можно привести чертеж танка или его описание (класс) и реальный танк (экземпляр класса, или объект).
Механизм «позднего связывания» в процессе выполнения программы определяет принадлежность объекта конкретному классу и производит вызов 
метода, относящегося к классу, объект которого был использован.
Механизм «позднего связывания» позволяет определять версию полиморфного метода во время выполнения программы. Другими словами, иногда
 невозможно на этапе компиляции определить, какая версия переопределенного метода будет вызвана на том или ином шаге программы.
Краеугольным камнем наследования и полиморфизма предстает следующая парадигма: «объект подкласса может использоваться всюду, где 
используется объект суперкласса».
При вызове метода класса он ищется в самом классе. Если метод существует, то он вызывается. Если же метод в текущем классе отсутствует,
 то обращение происходит к родительскому классу и вызываемый метод ищется у него. Если поиск неудачен, то он продолжается вверх по 
 иерархическому дереву вплоть до корня (верхнего класса) иерархии.
